ext.GROUP_ID = 'io.github.ginvavilon.traghentto'
ext.VERSION = '0.6.6-SNAPSHOT'
ext.REPOSITORY_URL = 'https://github.com/GinVavilon/traghetto-source'
ext.VCS_URL = 'https://github.com/GinVavilon/traghetto-source.git'
ext.LICENSES = ['Apache-2.0']
ext.REPOSITOTY_NAME = 'Traghetto-Source'
ext.DESCRIPTION = 'Interfaces for join sources of fiiles as files sytem, zip, http'
ext.PUBLISH = false
ext.MAVEN_UPLOAD_REPOSITORY = (hasProperty('snapshot'))?
                        "https://s01.oss.sonatype.org/content/repositories/snapshots/":
                        "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
buildscript {
    repositories {
        jcenter()
        google()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.4'
        classpath 'com.github.ginvavilon:android-eclipse:0.9.9'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.+'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
        google()
    }
        
}

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

def getGitTag(){

    try{
        FileRepositoryBuilder builder = new FileRepositoryBuilder();
        Repository repository = builder.findGitDir(projectDir)
            .readEnvironment()
            .build();
        Git git=Git.wrap(repository)
        
        RevWalk walk = new RevWalk(repository);
        def tagName = git.describe().call()
        
        def tag = walk.parseTag(repository.getTags().get(tagName).objectId)
        return tag
    } catch (e){
        return null
    }
}

ext.gitTag = getGitTag();

subprojects{
    afterEvaluate { project ->
        if (project.tasks.findByName('testClasses')) {
                configurations {
                testOutput.extendsFrom (testCompile)
            }
    
            task jarTest (type: Jar, dependsOn: testClasses) {
                from sourceSets.test.output
                archiveClassifier = 'test'
            }

            artifacts {
                testOutput jarTest
            }            
        }
        
                      
     
        if (project.hasProperty('eclipse')) {
            project.eclipse.project {
                 natures 'org.eclipse.buildship.core.gradleprojectnature'
                buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
            }    
        }
        
    }

}

def updatePom(def pom, def artifactName, def artifactDescription){ 
    pom.withXml {
        asNode().children().last() + {
        resolveStrategy = Closure.DELEGATE_FIRST
            name artifactName
            description artifactDescription
            inceptionYear '2018'
            url REPOSITORY_URL
            scm {
                url REPOSITORY_URL
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'ginVavilon'
                    name 'Vladimir Baraznovsky'
                    email 'ginVavilon@gmail.com'
                }
            }
        }
    }
}


def applyJavaPublishing(def project, def artifact,def name = NAME, def description = DESCRIPTION){
   
    project.with {
       
        apply plugin: 'maven-publish'
        java {
            withSourcesJar()
            withJavadocJar()
        }
        configurePublishing(project,artifact,artifact,name,description,components.java) 
    }

}

def applyAndroidPublishing(def project, def artifact,def name = NAME, def description = DESCRIPTION){
   
    project.with {
        apply plugin: 'maven-publish'
        android {
            publishing {
                singleVariant("release") {
                    withSourcesJar()
                    withJavadocJar()
                }
            }
        }
        afterEvaluate {
            configurePublishing(project, artifact, artifact,name, description,components.release) 
        }
    }

}

def configurePublishing(def project,def publishName, def artifact, def name = NAME, def description = DESCRIPTION,def component){
   
    project.with {
        apply plugin: 'signing'
        publishing {
        
            repositories {
                maven {
                    name = "snapshot"
                    url MAVEN_UPLOAD_REPOSITORY
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        
        
            publications {
                "$publishName"(MavenPublication) {
                    if (component != null){
                        from component
                    }
                    groupId GROUP_ID
                    artifactId artifact
                    version VERSION
                    updatePom(pom, name, description)
                    
                }                
            }
        }
        signing {
            sign publishing.publications."$publishName"
        }                    
    }

}


